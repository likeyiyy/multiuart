!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCK_SIZE	raw_uart.c	21;"	d	file:
CC	Makefile	/^CC = $(TILERA_ROOT)\/bin\/tile-cc$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -Wall -g $(OPT)$/;"	m
DATA_LEN	raw_uart.c	2;"	d	file:
FORWARD_ADDR	multiuart_common.h	35;"	d
FORWARD_ADDR	multiuart_common.h	38;"	d
FORWARD_CMD	multiuart_common.h	42;"	d
FORWARD_CMD	raw_uart.c	4;"	d	file:
H_LLOG_H	llog.h	9;"	d
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INTEL_QUEUE	queue.h	8;"	d
LG2_CAPACITY	multiuart_common.h	55;"	d
LIBS	Makefile	/^LIBS = -lgxio -lpthread$/;"	m
LL_DEBUG	llog.h	/^    LL_DEBUG =   5,$/;"	e	enum:LogLevel
LL_ERROR	llog.h	/^    LL_ERROR =   1,$/;"	e	enum:LogLevel
LL_NOTICE	llog.h	/^    LL_NOTICE =  3, $/;"	e	enum:LogLevel
LL_TRACE	llog.h	/^    LL_TRACE =   4,$/;"	e	enum:LogLevel
LL_WARNING	llog.h	/^    LL_WARNING = 2, $/;"	e	enum:LogLevel
LOG_DEBUG	llog.h	36;"	d
LOG_ERROR	llog.h	12;"	d
LOG_NOTICE	llog.h	24;"	d
LOG_TRACE	llog.h	30;"	d
LOG_WARN	llog.h	18;"	d
LogLevel	llog.h	/^typedef  enum LogLevel {  $/;"	g
LogLevel	llog.h	/^}LogLevel;$/;"	t	typeref:enum:LogLevel
MASTER_ADDR	multiuart_common.h	36;"	d
MASTER_ADDR	multiuart_common.h	39;"	d
MAX_BUFSIZ	multiuart_common.h	31;"	d
OBJS	Makefile	/^OBJS = $(SRCS:%.c=%.o) $/;"	m
PARALLELIZE	Makefile	/^PARALLELIZE = $(TILERA_ROOT)\/bin\/parallelize$/;"	m
PSOC_ADDR	multiuart_common.h	33;"	d
PSOC_TEMP_H	raw_uart.h	2;"	d
SRCS	Makefile	/^SRCS = uart_daemon.c socket_uart.c raw_uart.c $/;"	m
STATUS_CHECKSUM	raw_uart.c	9;"	d	file:
STATUS_COMMAND	raw_uart.c	12;"	d	file:
STATUS_COMPLETE	raw_uart.c	13;"	d	file:
STATUS_DATA	raw_uart.c	14;"	d	file:
STATUS_FUNC	raw_uart.c	8;"	d	file:
STATUS_IDLE	raw_uart.c	5;"	d	file:
STATUS_MASTER_ADDR	raw_uart.c	7;"	d	file:
STATUS_RQSEQ	raw_uart.c	11;"	d	file:
STATUS_SLAVE_ADDR	raw_uart.c	10;"	d	file:
STATUS_START	raw_uart.c	6;"	d	file:
STATUS_STOP	raw_uart.c	15;"	d	file:
TEMP_CMD	multiuart_common.h	41;"	d
TEMP_CMD	raw_uart.c	3;"	d	file:
TILE_MONITOR	Makefile	/^TILE_MONITOR = $(TILERA_ROOT)\/bin\/tile-monitor$/;"	m
TMC_QUEUE_NO_FLAGS	queue.h	4;"	d
TMC_QUEUE_SINGLE_RECEIVER	queue.h	6;"	d
TMC_QUEUE_SINGLE_SENDER	queue.h	5;"	d
UART_COMPLETE	raw_uart.c	20;"	d	file:
UART_MASTER_ADDR	raw_uart.c	18;"	d	file:
UART_SLAVE_ADDR	raw_uart.c	19;"	d	file:
UART_START	raw_uart.c	16;"	d	file:
UART_START	socket_uart.c	204;"	d	file:
UART_STOP	raw_uart.c	17;"	d	file:
UART_STOP	socket_uart.c	205;"	d	file:
UNIX_SOCKET_UART_RECV	multiuart_common.h	118;"	d
UNIX_SOCKET_UART_SEND	multiuart_common.h	117;"	d
_MULTIUART_COMMON_H	multiuart_common.h	9;"	d
_UART_SOCKET_H	socket_uart.h	9;"	d
__LIST_H_	list.h	10;"	d
__QUEUE_INTEL_H__	queue.h	2;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__socket_uart_real_recv	socket_uart.c	/^void * __socket_uart_real_recv(void * arg)$/;"	f
__socket_uart_real_send	socket_uart.c	/^void * __socket_uart_real_send(void * arg)$/;"	f
blist	list.h	/^struct blist$/;"	s
bucket	multiuart_common.h	/^    bucket_t * bucket;$/;"	m	struct:__anon6
bucket	multiuart_common.h	/^typedef struct bucket { $/;"	s
bucket_num	multiuart_common.h	/^    int bucket_num;$/;"	m	struct:__anon6
bucket_t	multiuart_common.h	/^} bucket_t; $/;"	t	typeref:struct:bucket
command	multiuart_common.h	/^    command_t * command;$/;"	m	struct:__anon3
command	multiuart_common.h	/^    command_t * command;$/;"	m	struct:__anon7
command	multiuart_common.h	/^    uint8_t * command;$/;"	m	struct:__anon2
command	multiuart_common.h	/^    uint8_t command;$/;"	m	struct:__anon8
command_t	multiuart_common.h	/^}__attribute__((__packed__))command_t;$/;"	t	typeref:struct:__anon2
common_header_t	multiuart_common.h	/^}__attribute__((__packed__)) common_header_t;$/;"	t	typeref:struct:__anon8
compare_blist	socket_uart.c	/^static inline int compare_blist(struct blist * node, recv_header_t * recv_header)$/;"	f	file:
complete	multiuart_common.h	/^    uint8_t complete;$/;"	m	struct:__anon3
count	multiuart_common.h	/^    uint32_t count;$/;"	m	struct:bucket
cur_command	multiuart_common.h	/^    uint8_t cur_command;$/;"	m	struct:__anon3
currenttime	llog.c	/^int currenttime(char * currTime)$/;"	f
data	list.h	/^	char * data;$/;"	m	struct:blist
data	multiuart_common.h	/^    uint8_t * data;$/;"	m	struct:__anon4
devs_name	multiuart_common.h	/^    char ** devs_name;$/;"	m	struct:__anon6
exit_if_ptr_is_null	multiuart_common.h	/^static inline void exit_if_ptr_is_null(void * ptr,const char * message)   $/;"	f
fd	socket_uart.c	/^    int fd;$/;"	m	struct:__anon1	file:
fds	multiuart_common.h	/^    int fds[4];$/;"	m	struct:__anon6
function	multiuart_common.h	/^    uint8_t function;$/;"	m	struct:__anon7
getLogLevel	llog.c	/^static char * getLogLevel(LogLevel level)$/;"	f	file:
get_time	raw_uart.c	/^void get_time(char *str_t)$/;"	f
global_LogLevel	llog.c	/^static LogLevel  global_LogLevel;$/;"	v	file:
global_fp	llog.c	/^static FILE * global_fp = NULL;$/;"	v	file:
global_mutex	llog.c	/^static pthread_mutex_t global_mutex;$/;"	v	file:
handler_uart_recv	socket_uart.c	/^void * handler_uart_recv(void * arg)$/;"	f
head_checksum	multiuart_common.h	/^    uint8_t head_checksum;$/;"	m	struct:__anon8
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon3
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon5
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon7
init_uart_device	raw_uart.c	/^int init_uart_device(const char * device)$/;"	f
length	multiuart_common.h	/^    uint16_t length;$/;"	m	struct:__anon4
list	multiuart_common.h	/^    struct list_head list;$/;"	m	struct:bucket	typeref:struct:bucket::list_head
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	list.h	75;"	d
list_for_each	list.h	78;"	d
list_for_each_safe	list.h	82;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
listhead	list.h	/^	struct list_head listhead;$/;"	m	struct:blist	typeref:struct:blist::list_head
llog	llog.c	/^int llog(LogLevel level, char * format, ...)$/;"	f
llog_init	llog.c	/^int llog_init(LogLevel level, FILE * fp)$/;"	f
lock	multiuart_common.h	/^    pthread_mutex_t  lock;$/;"	m	struct:bucket
loglevel	llog.c	/^char loglevel[6][10] = {"",$/;"	v
main	uart_daemon.c	/^int main(int argc, char ** argv)$/;"	f
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon3
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon7
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon8
message	multiuart_common.h	/^    message_t * message;$/;"	m	struct:__anon5
message_t	multiuart_common.h	/^}__attribute__((__packed__)) message_t;$/;"	t	typeref:struct:__anon4
netfn_rslun	multiuart_common.h	/^    uint8_t netfn_rslun;$/;"	m	struct:__anon8
next	list.h	/^	struct list_head* next; $/;"	m	struct:list_head	typeref:struct:list_head::list_head
nums	multiuart_common.h	/^    uint8_t nums;$/;"	m	struct:__anon2
open_server_socket	socket_uart.c	/^int open_server_socket(const char * domain_file)$/;"	f
packet_t	multiuart_common.h	/^}__attribute__((__packed__)) packet_t;$/;"	t	typeref:struct:__anon5
prev	list.h	/^	struct list_head* prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_buf	multiuart_common.h	/^static inline void print_buf(uint8_t * message,int length)$/;"	f
raw_uart_send	raw_uart.c	/^int raw_uart_send(int fd, message_t * message)$/;"	f
recv_function	multiuart_common.h	/^    uint8_t recv_function;$/;"	m	struct:__anon3
recv_header_t	multiuart_common.h	/^}__attribute__((__packed__)) recv_header_t;$/;"	t	typeref:struct:__anon7
recv_slave_addr	multiuart_common.h	/^    uint8_t recv_slave_addr;$/;"	m	struct:__anon3
rqseq_rqlun	multiuart_common.h	/^    uint8_t rqseq_rqlun;$/;"	m	struct:__anon8
send_function	multiuart_common.h	/^    uint8_t send_function;$/;"	m	struct:__anon3
send_queue	multiuart_common.h	/^    swsr_queue_t * send_queue;$/;"	m	struct:__anon6
send_slave_addr	multiuart_common.h	/^    uint8_t send_slave_addr;$/;"	m	struct:__anon3
seq	multiuart_common.h	/^    uint8_t seq;$/;"	m	struct:__anon7
slave_addr	multiuart_common.h	/^    uint8_t slave_addr;$/;"	m	struct:__anon8
slaver_addr	multiuart_common.h	/^    uint8_t slaver_addr;$/;"	m	struct:__anon7
so_uart	socket_uart.c	/^    socket_uart_t * so_uart;$/;"	m	struct:__anon1	file:
socket_context_t	socket_uart.c	/^}socket_context_t;$/;"	t	typeref:struct:__anon1	file:
socket_uart_init	socket_uart.c	/^int socket_uart_init(socket_uart_t * socket_uart, int dev_nums, char ** devs_name)$/;"	f
socket_uart_recv	socket_uart.c	/^void * socket_uart_recv(void * arg)$/;"	f
socket_uart_send	socket_uart.c	/^void * socket_uart_send(void * arg)$/;"	f
socket_uart_t	multiuart_common.h	/^}socket_uart_t;$/;"	t	typeref:struct:__anon6
socket_view_state	socket_uart.c	/^void * socket_view_state(void * arg)$/;"	f
stamp	multiuart_common.h	/^    struct timeval stamp;$/;"	m	struct:__anon4	typeref:struct:__anon4::timeval
start	multiuart_common.h	/^    uint8_t start;$/;"	m	struct:__anon8
uart_context_t	multiuart_common.h	/^}uart_context_t;$/;"	t	typeref:struct:__anon3
