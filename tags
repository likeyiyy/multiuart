!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCK_SIZE	protocol/ipmi_protocol.h	35;"	d
CC	Makefile	/^CC = $(TILERA_ROOT)\/bin\/tile-cc$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -Wall -g $(OPT)$/;"	m
DATA_LEN	protocol/ipmi_protocol.h	14;"	d
DISABLE	protocol/ipmi_protocol.c	19;"	d	file:
DISABLE	protocol/ipmi_protocol.h	12;"	d
ENABLE	protocol/ipmi_protocol.c	18;"	d	file:
ENABLE	protocol/ipmi_protocol.h	11;"	d
FORWARD_ADDR	multiuart_common.h	37;"	d
FORWARD_ADDR	multiuart_common.h	40;"	d
FORWARD_CMD	multiuart_common.h	44;"	d
FORWARD_CMD	protocol/ipmi_protocol.h	16;"	d
HEADER_LEN	message.h	11;"	d
H_LLOG_H	llog.h	9;"	d
Handlers	protocol/proto_manager.h	/^}Handlers;$/;"	t	typeref:struct:__anon4
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LIBS	Makefile	/^LIBS = -lgxio -lpthread$/;"	m
LL_DEBUG	llog.h	/^    LL_DEBUG =   5,$/;"	e	enum:LogLevel
LL_ERROR	llog.h	/^    LL_ERROR =   1,$/;"	e	enum:LogLevel
LL_NOTICE	llog.h	/^    LL_NOTICE =  3, $/;"	e	enum:LogLevel
LL_TRACE	llog.h	/^    LL_TRACE =   4,$/;"	e	enum:LogLevel
LL_WARNING	llog.h	/^    LL_WARNING = 2, $/;"	e	enum:LogLevel
LOG_DEBUG	llog.h	48;"	d
LOG_ERROR	llog.h	24;"	d
LOG_NOTICE	llog.h	36;"	d
LOG_TRACE	llog.h	42;"	d
LOG_WARN	llog.h	30;"	d
LogLevel	llog.h	/^typedef  enum LogLevel {  $/;"	g
LogLevel	llog.h	/^}LogLevel;$/;"	t	typeref:enum:LogLevel
MASTER_ADDR	multiuart_common.h	38;"	d
MASTER_ADDR	multiuart_common.h	41;"	d
MAX_BUFSIZ	multiuart_common.h	33;"	d
MAX_BUFSIZ	protocol/ipmi_protocol.c	15;"	d	file:
MAX_BUFSIZ	protocol/raw_protocol.c	15;"	d	file:
MsgBufferSize	protocol/ipmi_protocol.c	16;"	d	file:
OBJS	Makefile	/^OBJS = $(SRCS:%.c=%.o) $/;"	m
PARALLELIZE	Makefile	/^PARALLELIZE = $(TILERA_ROOT)\/bin\/parallelize$/;"	m
PSOC_ADDR	multiuart_common.h	35;"	d
ProcessMessageInvalidMessage	socket_uart.c	/^static inline void ProcessMessageInvalidMessage(int client)$/;"	f	file:
ProcessMessageInvalidName	socket_uart.c	/^static inline void ProcessMessageInvalidName(int client, char * name)$/;"	f	file:
ProcessMessageSucceed	socket_uart.c	/^static inline void ProcessMessageSucceed(int client)$/;"	f	file:
RecvHandler	protocol/proto_manager.h	/^}RecvHandler;$/;"	t	typeref:struct:_RecvHandler
SERIALIZE_LOCK_MASK	socket_uart.c	13;"	d	file:
SERIALIZE_MASK	socket_uart.c	12;"	d	file:
SRCS	Makefile	/^SRCS = uart_daemon.c socket_uart.c raw_uart.c llog.c$/;"	m
STATUS_CHECKSUM	protocol/ipmi_protocol.h	21;"	d
STATUS_COMMAND	protocol/ipmi_protocol.h	24;"	d
STATUS_COMPLETE	protocol/ipmi_protocol.h	25;"	d
STATUS_DATA	protocol/ipmi_protocol.h	26;"	d
STATUS_FUNC	protocol/ipmi_protocol.h	20;"	d
STATUS_IDLE	protocol/ipmi_protocol.h	17;"	d
STATUS_MASTER_ADDR	protocol/ipmi_protocol.h	19;"	d
STATUS_RQSEQ	protocol/ipmi_protocol.h	23;"	d
STATUS_SLAVE_ADDR	protocol/ipmi_protocol.h	22;"	d
STATUS_START	protocol/ipmi_protocol.h	18;"	d
STATUS_STOP	protocol/ipmi_protocol.h	27;"	d
TEMP_CMD	multiuart_common.h	43;"	d
TEMP_CMD	protocol/ipmi_protocol.h	15;"	d
TILE_MONITOR	Makefile	/^TILE_MONITOR = $(TILERA_ROOT)\/bin\/tile-monitor$/;"	m
TMC_QUEUE_NO_FLAGS	queue.h	4;"	d
TMC_QUEUE_SINGLE_RECEIVER	queue.h	6;"	d
TMC_QUEUE_SINGLE_SENDER	queue.h	5;"	d
UART_COMPLETE	protocol/ipmi_protocol.h	34;"	d
UART_MASTER_ADDR	protocol/ipmi_protocol.h	32;"	d
UART_SLAVE_ADDR	protocol/ipmi_protocol.h	33;"	d
UART_START	protocol/ipmi_protocol.h	29;"	d
UART_STOP	protocol/ipmi_protocol.h	30;"	d
UNIX_SOCKET_UART_RECV	multiuart_common.h	89;"	d
UNIX_SOCKET_UART_SEND	multiuart_common.h	88;"	d
UartRecvWorker	socket_uart.c	/^void * UartRecvWorker(void * arg)$/;"	f
VERIFY	llog.h	54;"	d
_CONFIG_H	config.h	9;"	d
_IPMI_PROTOCOL_H	protocol/ipmi_protocol.h	9;"	d
_MESSAGE_H	message.h	9;"	d
_MULTIUART_COMMON_H	multiuart_common.h	9;"	d
_PROTO_MANAGER_H	protocol/proto_manager.h	9;"	d
_RAW_PROTOCOL_H	protocol/raw_protocol.h	9;"	d
_RAW_PSOC_H	raw_uart.h	2;"	d
_RecvHandler	protocol/proto_manager.h	/^typedef struct _RecvHandler$/;"	s
_UART_SOCKET_H	socket_uart.h	9;"	d
__LIST_H_	list.h	10;"	d
__QUEUE_INTEL_H__	queue.h	2;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__queue	queue.c	/^struct __queue$/;"	s	file:
_ipmi_parser	protocol/ipmi_protocol.c	/^int _ipmi_parser(uart_dev_t * dev, int * start )$/;"	f
_read_from_uart	socket_uart.c	/^static inline int _read_from_uart(uart_dev_t * dev)$/;"	f	file:
_uart_dev	raw_uart.h	/^typedef struct _uart_dev$/;"	s
blist	list.h	/^struct blist$/;"	s
buffer	raw_uart.h	/^    unsigned char buffer[3000];$/;"	m	struct:_uart_dev
clear_buffer	protocol/ipmi_protocol.c	/^void clear_buffer(uart_dev_t * dev, int start, int end)$/;"	f
command	multiuart_common.h	/^    command_t * command;$/;"	m	struct:__anon7
command	multiuart_common.h	/^    command_t * command;$/;"	m	struct:__anon9
command	multiuart_common.h	/^    uint8_t * command;$/;"	m	struct:__anon6
command	multiuart_common.h	/^    uint8_t command;$/;"	m	struct:__anon10
command_t	multiuart_common.h	/^}__attribute__((__packed__))command_t;$/;"	t	typeref:struct:__anon6
common_header_t	multiuart_common.h	/^}__attribute__((__packed__)) common_header_t;$/;"	t	typeref:struct:__anon10
compare_blist	socket_uart.c	/^static inline int compare_blist(struct blist * node, recv_header_t * recv_header)$/;"	f	file:
complete	multiuart_common.h	/^    uint8_t complete;$/;"	m	struct:__anon7
config_dev_t	config.h	/^}config_dev_t;$/;"	t	typeref:struct:__anon2
config_t	config.h	/^}config_t;$/;"	t	typeref:struct:__anon3
configed	socket_uart.c	/^    int configed;$/;"	m	struct:__anon1	file:
context	protocol/proto_manager.c	/^Handlers * context = &handlers_body;$/;"	v
context	socket_uart.c	/^static socket_context_t * context = &socket_context_body;$/;"	v	file:
cur_command	multiuart_common.h	/^    uint8_t cur_command;$/;"	m	struct:__anon7
cur_index	raw_uart.h	/^    int cur_index;$/;"	m	struct:_uart_dev
currenttime	llog.c	/^int currenttime(char * currTime)$/;"	f
data	list.h	/^	char * data;$/;"	m	struct:blist
data	message.h	/^    uint8_t * data;$/;"	m	struct:__anon5
dequeue_count	queue.c	/^    uint64_t dequeue_count;$/;"	m	struct:__queue	file:
dequeue_mutex	queue.c	/^    pthread_mutex_t dequeue_mutex;$/;"	m	struct:__queue	file:
deserialized_message	message.c	/^message_t * deserialized_message(uint8_t * recv_buf, int length)$/;"	f
dev	message.h	/^    void * dev;$/;"	m	struct:__anon5
dev_nums	config.h	/^    int dev_nums;$/;"	m	struct:__anon3
dev_nums	socket_uart.c	/^    int dev_nums;$/;"	m	struct:__anon1	file:
devs	config.h	/^    config_dev_t * devs;$/;"	m	struct:__anon3
devs	socket_uart.c	/^    uart_dev_t * devs;$/;"	m	struct:__anon1	file:
enqueue_count	queue.c	/^    uint64_t enqueue_count;$/;"	m	struct:__queue	file:
enqueue_mutex	queue.c	/^    pthread_mutex_t enqueue_mutex;$/;"	m	struct:__queue	file:
fd	raw_uart.h	/^    int  fd;$/;"	m	struct:_uart_dev
flags	queue.c	/^    uint32_t flags;$/;"	m	struct:__queue	file:
flags	raw_uart.h	/^    int  flags;$/;"	m	struct:_uart_dev
free_message	message.c	/^void free_message(message_t * message)$/;"	f
func	protocol/proto_manager.h	/^    recv_handler func;$/;"	m	struct:_RecvHandler
function	multiuart_common.h	/^    uint8_t function;$/;"	m	struct:__anon9
getLogLevel	llog.c	/^static char * getLogLevel(LogLevel level)$/;"	f	file:
get_dev_by_name	socket_uart.c	/^static uart_dev_t * get_dev_by_name(char * name)$/;"	f	file:
get_dev_config_from_buffer	config.c	/^static inline int get_dev_config_from_buffer(config_t * config, char * buffer, int file_length)$/;"	f	file:
get_dev_nums	config.c	/^static inline int get_dev_nums(char * buffer, int file_length)$/;"	f	file:
get_file_length	config.c	/^static inline int get_file_length(FILE * fp)$/;"	f	file:
get_recv_handler_by_protocol	protocol/proto_manager.c	/^RecvHandler * get_recv_handler_by_protocol(char * protocol)$/;"	f
get_variable_value	config.c	/^static inline char * get_variable_value(char * start)$/;"	f	file:
global_LogLevel	llog.c	/^static LogLevel  global_LogLevel;$/;"	v	file:
global_fp	llog.c	/^static FILE * global_fp = NULL;$/;"	v	file:
global_mutex	llog.c	/^static pthread_mutex_t global_mutex;$/;"	v	file:
handlers	protocol/proto_manager.h	/^    RecvHandler * handlers;$/;"	m	struct:__anon4
handlers_body	protocol/proto_manager.c	/^Handlers handlers_body = {NULL, 0};$/;"	v
head_checksum	multiuart_common.h	/^    uint8_t head_checksum;$/;"	m	struct:__anon10
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon7
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon8
index	multiuart_common.h	/^    uint8_t index;$/;"	m	struct:__anon9
init_uart_device	raw_uart.c	/^int init_uart_device(uart_dev_t * dev)$/;"	f
ipmi_recv_handler	protocol/ipmi_protocol.c	/^int ipmi_recv_handler(uart_dev_t * dev)$/;"	f
isInvalidMessage	socket_uart.c	/^static int isInvalidMessage(char * buffer, int length)$/;"	f	file:
item_size	queue.c	/^    int item_size;$/;"	m	struct:__queue	file:
length	message.h	/^    uint16_t length;$/;"	m	struct:__anon5
length	queue.c	/^    unsigned int length;$/;"	m	struct:__queue	file:
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	list.h	75;"	d
list_for_each	list.h	78;"	d
list_for_each_safe	list.h	82;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
listhead	list.h	/^	struct list_head listhead;$/;"	m	struct:blist	typeref:struct:blist::list_head
llog	llog.c	/^int llog(LogLevel level, char * format, ...)$/;"	f
llog_init	llog.c	/^int llog_init(LogLevel level, FILE * fp)$/;"	f
loglevel	llog.c	/^char loglevel[6][10] = {"",$/;"	v
main	config.c	/^int main(int argc, char ** argv)$/;"	f
main	message.c	/^int main( int argc, char ** argv )$/;"	f
main	protocol/ipmi_protocol.c	/^int main( int argc, char ** argv )$/;"	f
main	uart_daemon.c	/^int main(int argc, char ** argv)$/;"	f
make_message	message.c	/^message_t * make_message(char * dev_name, uint8_t * recv_buf, int length)$/;"	f
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon10
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon7
master_addr	multiuart_common.h	/^    uint8_t master_addr;$/;"	m	struct:__anon9
message	multiuart_common.h	/^    message_t * message;$/;"	m	struct:__anon8
message_t	message.h	/^}message_t;$/;"	t	typeref:struct:__anon5
name	config.h	/^    char name[16];$/;"	m	struct:__anon2
name	message.h	/^    char name[16];$/;"	m	struct:__anon5
name	raw_uart.h	/^    char name[16];$/;"	m	struct:_uart_dev
netfn_rslun	multiuart_common.h	/^    uint8_t netfn_rslun;$/;"	m	struct:__anon10
next	list.h	/^	struct list_head* next; $/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	queue.c	/^    void ** node;$/;"	m	struct:__queue	file:
number	protocol/proto_manager.h	/^    int number;$/;"	m	struct:__anon4
nums	multiuart_common.h	/^    uint8_t nums;$/;"	m	struct:__anon6
open_server_socket	socket_uart.c	/^static int open_server_socket(const char * domain_file)$/;"	f	file:
packet_t	multiuart_common.h	/^}__attribute__((__packed__)) packet_t;$/;"	t	typeref:struct:__anon8
prev	list.h	/^	struct list_head* prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
print_buf	multiuart_common.h	/^static inline void print_buf(uint8_t * message,int length)$/;"	f
protocol	config.h	/^    char protocol[16];$/;"	m	struct:__anon2
protocol	protocol/proto_manager.h	/^    char protocol[16];$/;"	m	struct:_RecvHandler
protocol	raw_uart.h	/^    char protocol[16];$/;"	m	struct:_uart_dev
queue_dequeue	queue.c	/^int queue_dequeue(queue_t * queue,$/;"	f
queue_dequeue_multiple	queue.c	/^int queue_dequeue_multiple(queue_t * queue,$/;"	f
queue_empty	queue.c	/^int queue_empty(queue_t * queue)$/;"	f
queue_enqueue	queue.c	/^int queue_enqueue(queue_t * queue,$/;"	f
queue_enqueue_multiple	queue.c	/^int queue_enqueue_multiple(queue_t * queue,$/;"	f
queue_full	queue.c	/^int queue_full(queue_t * queue)$/;"	f
queue_init	queue.c	/^queue_t * queue_init(int log2_entries, uint32_t flags)$/;"	f
queue_size	queue.c	/^int queue_size(queue_t * queue)$/;"	f
queue_t	queue.h	/^typedef struct __queue queue_t;                                                                                          $/;"	t	typeref:struct:__queue
raw_recv_handler	protocol/raw_protocol.c	/^int raw_recv_handler(uart_dev_t * dev)$/;"	f
raw_uart_send	raw_uart.c	/^int raw_uart_send(int fd, message_t * message)$/;"	f
rbaud	config.h	/^    int rbaud;$/;"	m	struct:__anon2
rbaud	raw_uart.h	/^    int  rbaud;$/;"	m	struct:_uart_dev
read_config_file	config.c	/^int read_config_file(char * filename, config_t * config)$/;"	f
recv_function	multiuart_common.h	/^    uint8_t recv_function;$/;"	m	struct:__anon7
recv_handler	protocol/proto_manager.h	/^typedef int ( * recv_handler)(uart_dev_t * dev);$/;"	t
recv_header_t	multiuart_common.h	/^}__attribute__((__packed__)) recv_header_t;$/;"	t	typeref:struct:__anon9
recv_queue	raw_uart.h	/^    queue_t * recv_queue;$/;"	m	struct:_uart_dev
recv_slave_addr	multiuart_common.h	/^    uint8_t recv_slave_addr;$/;"	m	struct:__anon7
register_recv_handler	protocol/proto_manager.c	/^int register_recv_handler(char * name, recv_handler handler)$/;"	f
rqseq_rqlun	multiuart_common.h	/^    uint8_t rqseq_rqlun;$/;"	m	struct:__anon10
send_function	multiuart_common.h	/^    uint8_t send_function;$/;"	m	struct:__anon7
send_queue	socket_uart.c	/^    queue_t * send_queue;$/;"	m	struct:__anon1	file:
send_slave_addr	multiuart_common.h	/^    uint8_t send_slave_addr;$/;"	m	struct:__anon7
seq	multiuart_common.h	/^    uint8_t seq;$/;"	m	struct:__anon9
serial_lock	raw_uart.h	/^    pthread_mutex_t serial_lock;$/;"	m	struct:_uart_dev
serialized_message	message.c	/^int serialized_message(message_t * message, uint8_t * buffer, int * length)$/;"	f
slave_addr	multiuart_common.h	/^    uint8_t slave_addr;$/;"	m	struct:__anon10
slaver_addr	multiuart_common.h	/^    uint8_t slaver_addr;$/;"	m	struct:__anon9
socket_context_body	socket_uart.c	/^static socket_context_t socket_context_body;$/;"	v	file:
socket_context_t	socket_uart.c	/^}socket_context_t;$/;"	t	typeref:struct:__anon1	file:
socket_uart_init	socket_uart.c	/^int socket_uart_init(config_t * config)$/;"	f
socket_uart_recv_manager	socket_uart.c	/^void * socket_uart_recv_manager(void * arg)$/;"	f
socket_uart_send_manager	socket_uart.c	/^void * socket_uart_send_manager(void * arg)$/;"	f
stamp	message.h	/^    struct timeval stamp;$/;"	m	struct:__anon5	typeref:struct:__anon5::timeval
start	multiuart_common.h	/^    uint8_t start;$/;"	m	struct:__anon10
strchrtimes	message.c	/^static inline int strchrtimes(uint8_t * buffer, int length, uint8_t chr)$/;"	f	file:
strchrtimes	socket_uart.c	/^static inline int strchrtimes(uint8_t * buffer, int length, uint8_t chr)$/;"	f	file:
title	message.h	/^    char title[16];$/;"	m	struct:__anon5
total	queue.c	/^    unsigned int total;$/;"	m	struct:__queue	file:
uart_context_t	multiuart_common.h	/^}uart_context_t;$/;"	t	typeref:struct:__anon7
uart_dev_t	raw_uart.h	/^}uart_dev_t;$/;"	t	typeref:struct:_uart_dev
uart_recv_enqueue	raw_uart.c	/^void uart_recv_enqueue(uart_dev_t * device, message_t * message)$/;"	f
uart_send_worker	socket_uart.c	/^void * uart_send_worker(void * arg)$/;"	f
view_message	message.c	/^void view_message(message_t * message)$/;"	f
